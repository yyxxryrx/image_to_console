name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build-and-upload:
    name: Build & Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: image_to_console-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: image_to_console-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: image_to_console-macos-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: image_to_console-windows-x86_64.exe

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install Alsa-sys
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install libasound2-dev pkg-config -y
          fi

      - name: Build
        env:
          OPENSSL_STATIC: 1
        run: cargo build --release --target ${{ matrix.target }} --package image_to_console

      - name: Build Wheel
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --features sixel
          working-directory: "image-to-console-core-python"

      - name: Package
        shell: bash
        run: |
          mkdir dist
          cp target/${{ matrix.target }}/release/image_to_console${{ matrix.os == 'windows-latest' && '.exe' || '' }} \
             dist/${{ matrix.name }}
          cd dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../${{ matrix.name }}.zip ${{ matrix.name }}
          else
            tar czf ../${{ matrix.name }}.tar.gz ${{ matrix.name }}
          fi

      - name: Upload Python Wheels
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/target/wheels/*.whl
          asset_name: image_to_console_python-${{ matrix.target }}.whl
          asset_content_type: application/octet-stream

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: ${{ matrix.name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: application/octet-stream